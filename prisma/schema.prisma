// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String?    @db.VarChar(255)
  email     String?    @unique @db.VarChar(255)
  password  String?    @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Session   Session[]
  Cart      Cart[]
  Checkout  Checkout[]

  @@map("user")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Product {
  id        Int        @id @default(autoincrement())
  name      String
  price     Int
  image     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]

  @@map("product")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  User      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  @@map("cart")
}

model CartItem {
  id         Int       @id @default(autoincrement())
  quantity   Int       @default(1)
  inOrder    Boolean   @default(true)
  cartId     Int
  Cart       Cart      @relation(fields: [cartId], references: [id])
  productId  Int
  Product    Product   @relation(fields: [productId], references: [id])
  checkoutId Int?
  Checkout   Checkout? @relation(fields: [checkoutId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("cart_item")
}

enum Status {
  PENDING
  PAID
  PROCESSING
  CANCELLED
  REFUNDED
}

model Checkout {
  id        Int        @id @default(autoincrement())
  userId    Int
  User      User       @relation(fields: [userId], references: [id])
  total     Int
  status    Status     @default(PENDING)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("checkout")
}
